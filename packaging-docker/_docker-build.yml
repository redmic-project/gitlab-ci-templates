.docker-operations:
  image: ${DOCKER_BUILD_IMAGE_NAME}:${DOCKER_BUILD_IMAGE_TAG}
  variables:
    DOCKER_BUILD_IMAGE_NAME: pedroetb/docker-build
    DOCKER_BUILD_IMAGE_TAG: latest
    PACKAGED_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}
    PACKAGED_IMAGE_TAG: ${CI_COMMIT_SHA}
    REGISTRY_URL: ${CI_REGISTRY}
    REGISTRY_USER: gitlab-ci-token
    REGISTRY_PASS: ${CI_JOB_TOKEN}

.docker-build:
  extends: .docker-operations
  stage: package
  variables:
    NEW_COMPOSE_FILE_NAME: compose.tmpl.yaml:compose.dev.yaml
    OLD_COMPOSE_FILE_NAME: docker-compose.tmpl.yml:docker-compose.dev.yml
  before_script:
    - echo "Find Compose files with known names at known paths automatically .."
    - >
      if [ -z ${COMPOSE_FILE_NAME} ];
      then
        for directory in ${COMPOSE_PROJECT_DIRECTORY:-build deploy .};
        do
          firstNewComposeFile=$(echo "${NEW_COMPOSE_FILE_NAME}" | cut -d ':' -f 1);
          newSingleComposeFile=compose.yaml;
          firstOldComposeFile=$(echo "${OLD_COMPOSE_FILE_NAME}" | cut -d ':' -f 1);
          oldSingleComposeFile=docker-compose.yml;
          if [ -f ${directory}/${firstNewComposeFile} ];
          then
            echo "Detected '${directory}/${firstNewComposeFile}' compose file, nice!";
            composeFileName="${NEW_COMPOSE_FILE_NAME}";
          elif [ -f ${directory}/${newSingleComposeFile} ];
          then
            echo "Detected '${directory}/${newSingleComposeFile}' compose file, nice!";
            composeFileName="${newSingleComposeFile}";
          elif [ -f ${directory}/${firstOldComposeFile} ];
          then
            echo "Detected '${directory}/${firstOldComposeFile}' compose file (old naming)";
            composeFileName="${OLD_COMPOSE_FILE_NAME}";
          elif [ -f ${directory}/${oldSingleComposeFile} ];
          then
            echo "Detected '${directory}/${oldSingleComposeFile}' compose file (old naming)";
            composeFileName="${oldSingleComposeFile}";
          else
            echo "No compose file detected at '${directory}/'";
          fi;
          if [ ! -z ${composeFileName} ];
          then
            echo "Automatically set COMPOSE_FILE_NAME to '${composeFileName}' and COMPOSE_PROJECT_DIRECTORY to '${directory}'";
            export COMPOSE_FILE_NAME="${composeFileName}";
            export COMPOSE_PROJECT_DIRECTORY="${directory}";
            break;
          fi;
        done;
        if [ -z ${COMPOSE_FILE_NAME} ];
        then
          echo "No compose file specified or detected, using docker-build default for COMPOSE_FILE_NAME";
        fi;
      else
        echo "COMPOSE_FILE_NAME is defined, omitting automatic lookup";
      fi;
  script: build

.docker-tag:
  extends: .docker-operations
  stage: post-package
  dependencies: []
  variables:
    NEW_IMAGE_TAG: ${CI_COMMIT_TAG}

.docker-tag-gitlab:
  extends: .docker-tag
  script: tag ${PACKAGED_IMAGE_NAME}:${PACKAGED_IMAGE_TAG} ${CI_REGISTRY_IMAGE}:${NEW_IMAGE_TAG}

.docker-tag-dockerhub:
  extends: .docker-tag
  variables:
    SOURCE_IMAGE_NAME: ${CI_PROJECT_PATH}
    ROOT_NAME: ${DOCKER_HUB_ROOT}
    TARGET_REGISTRY_URL: docker.io
    TARGET_REGISTRY_USER: ${DOCKER_HUB_USER}
    TARGET_REGISTRY_PASS: ${DOCKER_HUB_PASS}
  script: tag ${PACKAGED_IMAGE_NAME}:${PACKAGED_IMAGE_TAG} $(flatten):${NEW_IMAGE_TAG}
